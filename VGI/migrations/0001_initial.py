# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-10-23 18:47
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('q11', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q12', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q13', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q14', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q15', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q21', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q22', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q23', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q24', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q25', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q26', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q27', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q28', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q29', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q210', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q31', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q32', models.PositiveSmallIntegerField(choices=[(1, 'Negligible'), (2, 'Very low'), (3, 'Low'), (4, 'Moderate'), (5, 'High'), (7, 'Very High'), (8, 'Extreme')])),
                ('q33', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q34', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q35', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q36', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q37', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q38', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q39', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q310', models.PositiveSmallIntegerField(choices=[(1, 'Very Bad'), (2, 'Bad'), (3, 'Somewhat Bad'), (4, 'Neither Good nor Bad'), (5, 'Somewhat Good'), (6, 'Good'), (7, 'Very Good')])),
                ('q311', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q312', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q313', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q314', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q315', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q316', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
                ('q317', models.PositiveSmallIntegerField(choices=[(1, 'Strongly Disagree'), (2, 'Disagree'), (3, 'Somewhat Disagree'), (4, 'Neither Agree Nor Disagree'), (5, 'Somewhat Agree'), (6, 'Agree'), (7, 'Strongly Agree')])),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('reg_code', models.PositiveIntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('unit_code', models.PositiveIntegerField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='VGI.Region')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_citizen', models.BooleanField(default=False, help_text='Designates is the user citizen.')),
                ('is_expert', models.BooleanField(default=False, help_text='Designates is the user expert.')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates is the user admin.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='criteria',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='VGI.Unit'),
        ),
        migrations.AddField(
            model_name='criteria',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
